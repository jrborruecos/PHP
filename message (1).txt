---
- name: Lectura de IPS y nombre de dominio
  hosts: localhost
  gather_facts: yes
  vars_prompt:
    - name: "apache_ips"
      prompt: "Ingresa las IPs de los servidores Apache, separadas por comas"
      private: no
    - name: "nginx_ip"
      prompt: "Ingresa la IP del servidor Nginx"
      private: no
    - name: "nginx_domain"
      prompt: "Ingresa el nombre de dominio del servidor Nginx (por ejemplo, ejemplo.com)"
      private: no

  become: yes
  tasks:
    - name: Convertir las IPs de Apache en una lista
      set_fact:
        apache_servers: "{{ apache_ips.split(',') }}"

    - name: Instalar Apache en los servidores especificados
      package:
        name: apache2
        state: present
      delegate_to: "{{ item }}"
      loop: "{{ apache_servers }}"

    - name: Configurar Apache para escuchar en el puerto 8080
      lineinfile:
        path: /etc/apache2/ports.conf
        regexp: '^Listen'
        line: 'Listen 8080'
      delegate_to: "{{ item }}"
      loop: "{{ apache_servers }}"

    - name: Crear archivo de configuración de Apache para puerto 8080
      copy:
        content: |
          <VirtualHost *:8080>
              DocumentRoot /var/www/html
              ServerAdmin webmaster@localhost
              ErrorLog ${APACHE_LOG_DIR}/error.log
              CustomLog ${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>
        dest: /etc/apache2/sites-available/000-default.conf
      delegate_to: "{{ item }}"
      loop: "{{ apache_servers }}"

    - name: Habilitar el sitio de Apache para puerto 8080
      command: a2ensite 000-default.conf
      delegate_to: "{{ item }}"
      loop: "{{ apache_servers }}"

    - name: Reiniciar Apache para aplicar cambios
      service:
        name: apache2
        state: restarted
      delegate_to: "{{ item }}"
      loop: "{{ apache_servers }}"

    - name: Instalar Nginx en el servidor Nginx
      package:
        name: nginx
        state: present
      delegate_to: "{{ nginx_ip }}"

    - name: Crear directorios para los certificados SSL si no existen
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /etc/ssl/private
        - /etc/ssl/certs
      delegate_to: "{{ nginx_ip }}"
      become: true

    - name: Crear un certificado SSL autofirmado
      command: >
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key
        -out /etc/ssl/certs/nginx-selfsigned.crt
        -subj "/C=US/ST=State/L=City/O=Organization/OU=IT/CN={{ nginx_domain }}"
      delegate_to: "{{ nginx_ip }}"
      become: true

    - name: Configurar Nginx para balanceo de carga con SSL
      copy:
        content: |
          upstream apache_backend {
            {% for ip in apache_servers %}
            server {{ ip }}:8080;
            {% endfor %}
          }

          server {
              listen 80;
              server_name {{ nginx_domain }};
              return 301 https://$host$request_uri;
          }

          server {
              listen 443 ssl;
              server_name {{ nginx_domain }};

              ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
              ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';

              ssl_prefer_server_ciphers on;
              ssl_session_cache shared:SSL:10m;
              ssl_session_timeout 1d;

              location / {
                  proxy_pass http://apache_backend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
        dest: /etc/nginx/sites-available/default
      delegate_to: "{{ nginx_ip }}"
      become: true

    - name: Crear enlace simbólico para habilitar el sitio en Nginx
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
      delegate_to: "{{ nginx_ip }}"
      become: true

    - name: Reiniciar Nginx para aplicar cambios
      service:
        name: nginx
        state: restarted
      delegate_to: "{{ nginx_ip }}"
